<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title> Preentrega </title>
    <link rel="icon" type="image/png" href="/static/img/headTitle.ico">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css"
        integrity="sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/css/intlTelInput.css"/>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/intlTelInput.min.js"></script>
    <link rel="stylesheet" href="/static/css/styles.css">
</head>
<body>
    {{{body}}}

    <!-- Script Socket.io -->
    <script src="/socket.io/socket.io.js"></script>
    <!-- Script Normalizr -->
    <script src="https://cdn.jsdelivr.net/npm/normalizr@3.6.1/dist/normalizr.browser.min.js"></script>
    <!-- Script BootstrapJS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
    
    <!-- Script Procesos Generales (Socket, Normalizr) -->
    <script>
        /*=============== Denormalizacion de datos ===============*/
        const schemaAuthors = new normalizr.schema.Entity('author', {}, {idAttribute: 'email'})
        const schemaMensaje = new normalizr.schema.Entity('post', {author: schemaAuthors}, {idAttribute: 'id'})
        const schemaMensajes = new normalizr.schema.Entity('posts', {mensajes: [schemaMensaje]}, {idAttribute: 'id'})

        /*================ Coneccion con socket.io ================*/
        const socket = io();

        /*============== Respuestas front del scoket ==============*/
        socket.on('from-server-message', messages =>{ //Respuesta cuando se envia mensaje
            let mensajesNormSIZE = JSON.stringify(messages).length;
            let mensajesDenorm = normalizr.denormalize(messages.result, schemaMensajes, messages.entities);
            let mensajesDenormSIZE = JSON.stringify(mensajesDenorm.messages).length;
            let compresion = parseInt((mensajesNormSIZE * 100) / mensajesDenormSIZE );
            document.getElementById('compresionText').innerText = 'Compresion ' + compresion + '%'
            renderMessages(mensajesDenorm.messages)
        })

        /*=============== Renderizado de mensajes ===============*/
        function renderMessages(messages) { 
            const cuerpoMensaje = messages.map(msg => {
                return `<span> <span style="color: blue; font-weight: bold; font-size: 22px">${msg.author}</span>
                        <span style="color: brown; font-size: 12px"> (${msg.timestamp})</span>
                        :
                        <span style="color: green; font-style: italic">${msg.text}</span></span>`
            }).join('')
            document.querySelector('#chatHistorial').innerHTML = cuerpoMensaje;
        }

        /*=============== Presionar boton cuando manda mensaje ===============*/
        function enviarMensaje(user) {
            const inputMsg = document.getElementById("commentary")
            const timestamp = new Date().toLocaleString('es-AR')

            const msg = {
                author: user,
                text: inputMsg.value,
                timestamp: timestamp
            }
            socket.emit('from-client-message', msg);
        }                  
        
        /*============ Respuesta al cargar o agregar productos ============*/
        socket.on('from-server-product-admin', (products) =>{ 
            renderProductsAdmin(products)
        })

        socket.on('from-server-product-noAdmin', (products) =>{ 
            renderProductsNoAdmin(products)
        })

        /*=============== Renderizado de productos ===============*/
        async function renderProductsAdmin(products) { 
            const table = `<tr style="color: yellow;"> <th>Producto</th> <th>Precio</th> <th>Imagen</th> </tr>`;
            const cuerpoProductos = await products.map(item => {
                return `
                <tr>
                    <td>${item.product}</td>
                    <td>${item.price}</td>
                    <td>
                        <img width="30px" src=${item.img} alt="Prod. img">
                    </td>
                </tr>`
            }).join('');
            document.getElementById('products-table').innerHTML = table+cuerpoProductos; 
        }

        async function renderProductsNoAdmin(products) { 
            const table = `<tr style="color: yellow;"> <th>Productos</th> <th>Precio</th> <th>Imagen</th> <th>Comprar</th> </tr>`;
            const cuerpoProductos = await products.map(item => {
                return `
                <tr>
                    <td>${item.product}</td>
                    <td>${item.price}</td>
                    <td>
                        <img width="30px" src=${item.img} alt="Prod. img">
                    </td>
                    <td> <a href='/'> + </a> </td>
                </tr>`
            }).join('');
            document.getElementById('on-sale-products').innerHTML = table+cuerpoProductos; 
        }

        function enviarProducto() {
            const inputProduct = document.querySelector('#producto')
            const inputPrice = document.querySelector('#precio')
            const inputImg = document.querySelector('#img')

            const producto = {
                producto: inputProduct.value,
                precio: inputPrice.value,
                img: inputImg.value
            }
            socket.emit('from-client-product', producto);
        }    
 
    </script>
</body>
</html>
